start "" "C:\TJBF\zPortableInstalls\VBNetScript\VBNetScript.exe" %0
exit
C:\TJBF\zPortableInstalls\VBNetScript\DLL_WinForm2019m09d13\System.Drawing.dll
C:\TJBF\zPortableInstalls\VBNetScript\DLL_WinForm2019m09d13\System.Windows.Forms.dll
C:\TJBF\zPortableInstalls\VBNetScript\MxClasses\MxBaseE7.vb
            Dim objFORM = New Mx.UIForm()
            'System.Windows.Forms.Application.Run(objFORM) only works from a command line program with no forms open. VBNetScript already has a form open.
            Call objFORM.ShowDialog()
        'Me.txtRetVal.Text = retOUTPUT.gText
		'RetVal = retOUTPUT.gText
		RetVal = "Quit"
	End Function
End Class
End Namespace

Namespace Mx
    Public Class UIForm
        Inherits System.Windows.Forms.Form
        
		Private vobjTIMER As System.Windows.Forms.Timer
		
	    Public Sub New()
            Me.Name = "Tiddler_Move"
            Me.Text = "Tiddler Move 5-Sec"
            Me.Size = New System.Drawing.Size(400, 50)            
            Me.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen
			
			Me.vobjTIMER = new System.Windows.Forms.Timer()
			Me.vobjTIMER.Interval = 5000
			AddHandler Me.vobjTIMER.Tick, AddressOf Timer1_Tick
			Me.vobjTIMER.Start()
        End Sub
		
		Sub Timer1_Tick(sender As object, e As System.EventArgs)
			Me.vobjTIMER.Stop()
			Dim retOUTPUT = New Mx.sub_main.CombineTextOutput(Mx.Strapd(), New Mx.glbl.gFileIo)
			'retOUTPUT = Mx.sub_main.Proc_Exec(retOUTPUT, My.Application.Info.DirectoryPath.Replace("\bin\Debug", ""), New Mx.glbl.gDirIo, New Mx.glbl.gPathIo, New Mx.glbl.gThread)
			retOUTPUT = Mx.sub_main.Proc_Exec(retOUTPUT, Mx.Class1.SourcePath, New Mx.glbl.gDirIo, New Mx.glbl.gPathIo, New Mx.glbl.gThread)
			Me.vobjTIMER.Start()
		End Sub
    End Class 'UIForm

	
    Public Class sub_main
        Public Shared Function Proc_Exec(ret_output As CombineTextOutput, ur_code_folder As String, ur_dir_io As glbl.gDirIo, ur_path_io As glbl.gPathIo, ur_thread As glbl.gThread) As CombineTextOutput
            Proc_Exec = ret_output
            ret_output.gText.d("Quit")
            Dim strEXISTING_FOLDER = ur_path_io.GetDirectoryName(ur_code_folder)
            Dim strNEW_DATA_FOLDER = System.Environment.ExpandEnvironmentVariables("%USERPROFILE%\downloads")
            Dim objERR_LIST = New ErrListBase : Try
                'List what resources to find
                'No command line; hard-coded to use clipboard
                Dim trwPARMS = New sln.ParmsRow()
                Dim lstFILE = New sln.FileList()
                trwPARMS = sln.RsrcCompile.wParm_App_Name(trwPARMS, ur_code_folder)
                trwPARMS = sln.RsrcCompile.wParm_Folder_Defaults(trwPARMS, strNEW_DATA_FOLDER, strEXISTING_FOLDER)

                'Compile what resources you have
                lstFILE = sln.RsrcCompile.wFileList_Matches(lstFILE, trwPARMS, ur_dir_io, ur_path_io)

                'Create output you want
                'Call sln.ProcCompile.Wait_ToStartCopy(lstFILE, ur_thread)
                ret_output.gFileIo = sln.CreateOutputCompile.Move_Files(ret_output.gFileIo, lstFILE)

            Catch ex As System.Exception
                Call objERR_LIST.dError_Stack(ex)
            End Try

            If objERR_LIST.Found Then
                ret_output.gText.Clear().d(objERR_LIST.ToString)
            End If
        End Function 'Proc_Exec

        Public Class CombineTextOutput
            Public gFileIo As glbl.gFileIo
            Public gText As Strap

            Public Sub New(ur_text As Strap, ur_file_io As glbl.gFileIo)
                Me.gText = ur_text
                Me.gFileIo = ur_file_io
            End Sub
        End Class 'CombineTextOutput
    End Class 'sub_main


    Public Class sln
        Public Enum enmPCol
            app_name
            new_data_folder
            existing_folder
        End Enum 'enmDCol

        Public Class ParmsRow
            Inherits TRow(Of enmPCol)
        End Class

        Public Enum enmFCol
            new_data_path
            existing_path
        End Enum

        Public Class FileRow
            Inherits TRow(Of enmFCol)
        End Class

        Public Class FileList
            Inherits Objlist(Of FileRow)
        End Class 'FileList

        Public Class CreateOutputCompile
            Public Shared Sub Wait_ToStartCopy(ur_files As FileList, ur_thread As glbl.gThread)
                If ur_files.Count > 0 Then
                    Call prv.Wait_FiveSeconds(ur_thread)
                End If
            End Sub 'Wait_FiveSeconds

            Public Shared Function Move_Files(ret_file_io As glbl.gFileIo, ur_files As FileList) As glbl.gFileIo
                Move_Files = ret_file_io
                For Each trwFILE In ur_files
                    ret_file_io.Move(trwFILE.v(enmFCol.new_data_path), trwFILE.v(enmFCol.new_data_path) & ".TDLY")
                    ret_file_io.Delete(trwFILE.v(enmFCol.existing_path))
                    ret_file_io.Move(trwFILE.v(enmFCol.new_data_path) & ".TDLY", trwFILE.v(enmFCol.existing_path))
                Next trwFILE
            End Function 'Move_Files

            Private Class prv
                Public Shared Sub Wait_FiveSeconds(ur_thread As glbl.gThread)
                    ur_thread.Sleep(2000)
                End Sub 'Wait_FiveSeconds
            End Class 'prv
        End Class 'CreateOutputCompile

        Public Class RsrcCompile
            Public Shared Function wParm_App_Name(ret_parms_row As ParmsRow, ur_code_folder As String) As ParmsRow
                wParm_App_Name = ret_parms_row
                Dim flnPATH = New MxText.FileName().d(ur_code_folder)
                ret_parms_row.v(enmPCol.app_name) = flnPATH.FileGroup
            End Function 'wParm_App_Name

            Public Shared Function wParm_Folder_Defaults(ret_parms_row As ParmsRow, ur_new_data_folder As String, ur_existing_folder As String) As ParmsRow
                wParm_Folder_Defaults = ret_parms_row
                ret_parms_row.v(enmPCol.new_data_folder) = ur_new_data_folder
                ret_parms_row.v(enmPCol.existing_folder) = ur_existing_folder
            End Function 'wParm_Folder_Defaults

            Public Shared Function wFileList_Matches(ret_file_list As FileList, ur_parms_row As ParmsRow, ur_dir_io As glbl.gDirIo, ur_path_io As glbl.gPathIo) As FileList
                wFileList_Matches = ret_file_list
                Const strLIT_STAR_DOT_HTML = "*.html"
                Dim sdaNEW_DATA_FILES = ur_dir_io.GetFiles(ur_parms_row.v(enmPCol.new_data_folder), strLIT_STAR_DOT_HTML)
                Dim sdaEXISTING_FILES = ur_dir_io.GetFiles(ur_parms_row.v(enmPCol.existing_folder), strLIT_STAR_DOT_HTML)
                For Each kvpNEW_DATA In sdaNEW_DATA_FILES.kvp
                    For Each kvpEXISTING In sdaEXISTING_FILES.kvp
                        If AreEqual(ur_path_io.GetFileName(kvpEXISTING.v), ur_path_io.GetFileName(kvpNEW_DATA.v)) Then
                            Dim trwFILE = New FileRow()
                            trwFILE.v(enmFCol.new_data_path) = kvpNEW_DATA.v
                            trwFILE.v(enmFCol.existing_path) = kvpEXISTING.v
                            ret_file_list.Add(trwFILE)
                            Exit For
                        End If
                    Next kvpEXISTING
                Next kvpNEW_DATA
            End Function 'wFileList_Matches
        End Class 'RsrcCompile
    End Class 'sln
	

    Partial Public Class glbl
        Public Class gDirIo
            Public Function GetFiles(ur_path As String, ur_search_pattern As String) As Obalist(Of String)
                GetFiles = New Obalist(Of String)(System.IO.Directory.GetFiles(ur_path, ur_search_pattern))
            End Function
        End Class 'gDirIo

        Public Class gFileIo
            Public Sub Delete(ur_path As String)
                System.IO.File.Delete(ur_path)
            End Sub

            Public Sub Move(ur_source_path As String, ur_dest_path As String)
                System.IO.File.Move(ur_source_path, ur_dest_path)
            End Sub
        End Class 'gFileIo

        Public Class gPathIo
            Public Function GetDirectoryName(ur_path As String) As String
                GetDirectoryName = System.IO.Path.GetDirectoryName(ur_path)
            End Function

            Public Function GetFileName(ur_path As String) As String
                GetFileName = System.IO.Path.GetFileName(ur_path)
            End Function
        End Class 'gPathIo

        Public Class gThread
            Public Sub Sleep(ur_milliseconds As Integer)
                System.Threading.Thread.Sleep(ur_milliseconds)
            End Sub
        End Class 'gThread
    End Class 'glbl
End Namespace 'Mx
